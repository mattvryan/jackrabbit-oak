/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to You under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.jackrabbit.oak.blob.cloud;

import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeTrue;

import java.util.Properties;

import org.apache.jackrabbit.oak.plugins.blob.datastore.AbstractDataStoreTest;
import org.jetbrains.annotations.NotNull;
import org.junit.After;
import org.junit.Before;

public abstract class AbstractCloudDataStoreTest extends AbstractDataStoreTest {

    protected Properties props;
    protected String container;
    protected AbstractCloudDataStore cloudDataStore;
    protected AbstractCloudBackend backend;


    @Override
    @Before
    public void setUp() throws Exception {
        assumeTrue(isDataStoreConfigured());

        container = String.valueOf(randomGen.nextInt(9999)) + "-" + String.valueOf(randomGen.nextInt(9999))
                + "-cloudds-unittest-autogenerated";
        props = getDataStoreConfig(container);
        props.setProperty("secret", "123456");

        super.setUp();

        assertTrue(ds instanceof AbstractCloudDataStore);
        cloudDataStore = (AbstractCloudDataStore) ds;
        backend = (AbstractCloudBackend) cloudDataStore.getBackend();
    }

    @Override
    @After
    public void tearDown() {
        try {
            super.tearDown();
        } catch (Exception ignore) {
        }
        try {
            deleteContainer(container);
        } catch (Exception ignore) {
        }
    }

    protected abstract boolean isDataStoreConfigured();

    protected abstract @NotNull Properties getDataStoreConfig(@NotNull final String containerName);

    protected abstract void deleteContainer(@NotNull final String containerName) throws Exception;
}
